
trigger:
  - main

pr:
  - main

jobs:

  - job: Test
    condition: eq(variables['Build.Reason'], 'PullRequest')
    strategy:
      matrix:
        mac:
          imageName: 'macos-latest'
          isMac: True
        win:
          imageName: 'windows-latest'
          isWindows: True
        lin:
          imageName: 'ubuntu-latest'
          isLinux: True

    pool:
      vmImage: $(imageName)

    steps:
      - checkout: self
        fetchDepth: 1

      - bash: |
          cmake -Bbuild -DCMAKE_BUILD_TYPE=Release
          cmake --build build --config Release
          ./build/test-binary/sst-waveshapers-tests
        displayName: Run tests with cmake

  - job: Examples
    condition: eq(variables['Build.Reason'], 'PullRequest')
    strategy:
      matrix:
        mac:
          imageName: 'macos-latest'
          isMac: True
        win:
          imageName: 'windows-latest'
          isWindows: True
        lin:
          imageName: 'ubuntu-latest'
          isLinux: True

    pool:
      vmImage: $(imageName)

    steps:
      - checkout: self
        fetchDepth: 1

      - bash: |
          sudo apt-get update
          sudo apt install ninja-build libasound2-dev libx11-dev libxcomposite-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libfreetype6-dev libglu1-mesa-dev libjack-jackd2-dev
        condition: variables.isLinux
        displayName: Install Linux dependencies
      - bash: cmake -Bbuild -DCMAKE_BUILD_TYPE=Release -DSST_WAVESHAPERS_BUILD_EXAMPLES=ON
        displayName: Run cmake configure

      - bash: cmake --build build --config Release --target WaveshapersPlugin_VST3
        displayName: Build waveshapers_example_plugin

  - job: MacARM
    condition: eq(variables['Build.Reason'], 'PullRequest')
    pool:
      vmImage: 'macos-latest'

    steps:
      - checkout: self
        fetchDepth: 1

      - bash: cmake -Bbuild -GXcode -DSST_WAVESHAPERS_BUILD_TESTS=ON -D\"CMAKE_OSX_ARCHITECTURES=arm64\"
        displayName: Run cmake configure

      - bash: cmake --build build --config Debug --parallel --target sst-waveshapers-tests | xcpretty
        displayName: Build tests

  - job: Doxygenate
    condition: not(eq(variables['Build.Reason'], 'PullRequest'))
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
      fetchDepth: 1
  
    - task: DownloadSecureFile@1
      inputs:
        secureFile: sru-token.txt
  
    - bash: |
         sudo apt-get install doxygen graphviz
         doxygen doxygen/Doxyfile
  
         HASH=`git rev-parse --short HEAD`
         TOK=`cat $AGENT_TEMPDIRECTORY/sru-token.txt`
         git clone https://surge-rackupdater:${TOK}@github.com/surge-synthesizer/sst-docs
         git config --global user.email "surge-rackupdater@dev.null"
         git config --global user.name "surge-rackupdater"
  
         mkdir -p sst-docs/docs/sst-waveshapers
         pushd doxy-out
         tar cf - . | (cd ../sst-docs/docs/sst-waveshapers && tar xf -)
         popd
         pushd sst-docs
         git add docs
         git status
         git commit -m "Update sst-waveshapers docs at ${HASH}"
         git push origin main

      displayName: "Make Doxygen and Commit it"
